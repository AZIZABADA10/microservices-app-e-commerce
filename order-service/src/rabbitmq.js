// src/rabbitmq.js
const amqp = require('amqplib');
const Order = require('./models/order.model.js'); // Import du mod√®le Order

let channel;

async function connectRabbitMQ() {
  try {
    const connection = await amqp.connect(process.env.RABBITMQ_URL || 'amqp://localhost');
    channel = await connection.createChannel();
    console.log('‚úÖ [order-service] Connect√© √† RabbitMQ');

    // D√©clare la queue 'USER_REGISTERED' pour l'√©coute
    await channel.assertQueue('USER_REGISTERED');
    console.log("‚úÖ [order-service] File 'USER_REGISTERED' pr√™te √† recevoir des messages");

    // Consommer les messages de la file
    channel.consume('USER_REGISTERED', async (msg) => {
      if (msg !== null) {
        const user = JSON.parse(msg.content.toString());
        console.log('üì• [order-service] Message re√ßu:', user);

        // Cr√©er une commande pour l'utilisateur
        await createWelcomeOrder(user);

        // Confirmer la r√©ception du message
        channel.ack(msg);
      }
    });
  } catch (err) {
    console.error('‚ùå [order-service] RabbitMQ connection error:', err);
  }
}

// Fonction pour cr√©er une commande pour un utilisateur nouvellement enregistr√©
async function createWelcomeOrder(user) {
  try {
    // Cr√©e une commande avec un produit par d√©faut (exemple ici avec un produit fictif)
    const newOrder = new Order({
      productId: 'default-product-id', // Remplace par un ID de produit r√©el
      quantity: 1,
      status: 'en attente'
    });

    // Sauvegarde la commande dans la base de donn√©es
    await newOrder.save();
    console.log(`üì¶ [order-service] Commande cr√©√©e pour l'utilisateur ${user.email}:`, newOrder);
  } catch (error) {
    console.error('‚ùå [order-service] Erreur lors de la cr√©ation de la commande:', error);
  }
}

module.exports = { connectRabbitMQ };
